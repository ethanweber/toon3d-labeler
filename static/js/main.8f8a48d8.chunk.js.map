{"version":3,"sources":["Instructions.js","LabelCanvas.js","PointUploader.js","App.js","reportWebVitals.js","index.js"],"names":["Instructions","_ref","show","onHide","React","createElement","Modal","size","aria-labelledby","centered","Header","closeButton","Title","id","Body","Footer","Button","onClick","Popup","forwardRef","ref","onToggle","onReposition","onRenumber","style","validIndex","currentIndex","currentNumber","setCurrentNumber","useEffect","String","className","InputGroup","FormControl","placeholder","aria-label","type","value","onChange","e","target","width","maxWidth","parseInt","LabelCanvas","_ref2","currentImageIndex","image","validImage","polygons","hoveredPolygon","onHoverPolygon","clickedPolygons","onClickPolygon","showPolygons","points","validPoints","onSelectPoint","onDeletePoint","onIgnorePoint","keyHeld","hoverIndex","setHoverIndex","labelPointsMode","lineDrawingMode","linePoints","setLinePoints","lines","onAddLine","onDeleteLine","leftOrRight","myLeftOrRight","setLeftOrRight","originalImageSize","setOriginalImageSize","useState","height","currentToOriginalRatio","setCurrentToOriginalRatio","imageRef","useRef","popupRef","showPopup","setShowPopup","popupPosition","setPopupPosition","x","y","popupIndex","setPopupIndex","mousePosition","setMousePosition","hoveredLineIndex","setHoveredLineIndex","replaceIndex","setReplaceIndex","onClickOutside","event","current","contains","document","addEventListener","removeEventListener","onPointClick","index","rect","getBoundingClientRect","clientX","left","clientY","top","popupStyle","position","concat","img","Image","onload","src","onResize","widthRatio","window","addLinePoint","newLinePoints","push","length","startPoint","endPoint","onClickOnPoint","point","onRightClickOnPoint","preventDefault","max_num_subpolys","i","onMouseMove","alt","onContextMenu","opacity","filter","newNumber","console","log","old_index","new_index","temp","xmlns","pointerEvents","map","polygon","polyIndex","subpolygon","subpolyIndex","hovered","key","join","fill","stroke","strokeWidth","onMouseEnter","onMouseLeave","cx","cy","r","x1","y1","x2","y2","line","cursor","onLineRightClick","onLineClick","startDistance","Math","sqrt","endDistance","textAnchor","PointUploader","onUpload","isDragOver","setIsDragOver","uploadFile","file","reader","FileReader","readAsText","readerEvent","content","result","dragStyle","backgroundColor","borderColor","color","input","accept","onchange","files","click","onDragOver","onDragEnter","onDragLeave","onDrop","dataTransfer","clearData","Gallery","images","leftImageIndex","setLeftImageIndex","rightImageIndex","setRightImageIndex","validImages","Row","Col","App","ReactGA","send","hitType","page","location","pathname","metadata","setMetadata","setImages","setValidImages","depths","setDepths","setPolygons","hoveredPolygons","setHoveredPolygon","setClickedPolygons","setLabelPointsMode","setShowPolygons","setLineDrawingMode","setLines","setPoints","setValidPoints","setKeyHeld","nextLeftImage","prevIndex","prevLeftImage","nextRightImage","prevRightImage","onKeyDown","onKeyUp","path","parseQueryString","queryString","search","URLSearchParams","get","handleMetadata","data","polygonsArray","frames","frame","masks","mask","pointsArray","linesArray","onPointsUpload","fileContent","JSON","parse","updatedPoints","j","onLoadCurrent","async","cleanedPath","endsWith","slice","timestamp","Date","getTime","pointsURL","response","fetch","cache","ok","Error","json","jsonString","stringify","error","fetchCurrent","metadataURL","imageURLs","file_path","depthURLs","depth_image_file_path","fetchData","pop","updatedValidPoints","updatedClickedPolygons","updatedHoveredPolygons","updatedLines","lineIndex","splice","toggleValidImage","updatedValidImages","showInstructions","setShowInstructions","Container","href","textDecoration","example","variant","onUploadImages","multiple","sortedFiles","Array","from","sort","a","b","name","localeCompare","tempImages","imageUrl","URL","createObjectURL","onUploadZIP","readAsArrayBuffer","buffer","zip","JSZip","contents","loadAsync","tempDepthImages","tempMetadata","tempImageFilenames","tempDepthImageFilenames","fileName","fileData","Object","entries","dir","jsonContent","assign","match","depthImageUrl","keys","alert","onShowInstructions","onCloseInstructions","md","onAddIgnorePoints","current_points","current_valid_points","max_num_points","onExport","dataStr","encodeURIComponent","downloadAnchorNode","setAttribute","body","appendChild","remove","onClearCurrent","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","initialize","process","ReactDOM","createRoot","getElementById","render","StrictMode","classList","add"],"mappings":"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","file":"static/js/main.8f8a48d8.chunk.js","sourcesContent":["import React from 'react';\nimport { Modal, Button } from 'react-bootstrap';\n\nfunction Instructions({ show, onHide }) {\n  return (\n    <Modal show={show} onHide={onHide} size=\"lg\" aria-labelledby=\"contained-modal-title-vcenter\" centered>\n      <Modal.Header closeButton>\n        <Modal.Title id=\"contained-modal-title-vcenter\">\n          Instructions\n        </Modal.Title>\n      </Modal.Header>\n      <Modal.Body>\n        Upload a ZIP folder of the processed data or simply a selection of images.\n\n        Or, for no-upload use, host your processed data at some url. Then, specify the url in the path parameter.\n\n        <br />\n        <br />\n        For example, \"https://labeler.toon3d.studio/?path=http://localhost:8000/bobs-burgers-dining\".\n        <br />\n        <br />\n\n        Then, go through the images with the either the \"previous\" and \"next\" buttons\n        or the left and right arrow key,\n        clicking on points you believe the images share.\n        <br />\n        <br />\n        <b>To ignore images</b>\n        , you can toggle them off. This will exclude them from our reconstruction pipeline.\n        <br />\n        <br />\n        When labeling one of points, polygons, or lines,\n        you might want to only show that specific type to avoid conflicts.\n        <br />\n        <br />\n        <b>To label points</b>\n        , you can hide the polygons and click on the image to label points.\n        If you have a point that is occluded in one image,\n        when you are about to click to set that point, hold the 'n' key and then click.\n        This will save the point in that image in a way which tells Toon3D that it is not observed.\n        Make sure the numbers match up. You can hold 'd' to show the predicted depth image.\n        <br />\n        <br />\n        {/* bullet points */}\n        <ul>\n          <li>\n            <b>To delete the last point selected</b>\n            , right click.\n          </li>\n          <li>\n            <b>To replace a point</b>\n            , click an existing point, press \"Reposition\", then click somewhere else to replace it.\n          </li>\n          <li>\n            <b>To renumber a point</b>\n            , click an existing point, set the number, and click \"Renumber\".\n          </li>\n        </ul>\n        <br />\n        Have fun labeling!\n      </Modal.Body>\n      <Modal.Footer>\n        <Button onClick={onHide}>Close</Button>\n      </Modal.Footer>\n    </Modal>\n  );\n}\n\nexport default Instructions;\n","import React, { useState, useEffect, useRef } from 'react';\nimport Button from 'react-bootstrap/Button';\nimport InputGroup from 'react-bootstrap/InputGroup';\nimport FormControl from 'react-bootstrap/FormControl';\n\nconst Popup = React.forwardRef(({\n  onToggle, onReposition, onRenumber, style, validIndex, currentIndex, currentNumber, setCurrentNumber,\n}, ref) => {\n  // Update the input field based on the currentIndex\n  useEffect(() => {\n    setCurrentNumber(String(currentIndex + 1)); // Assuming index starts at 0\n  }, [currentIndex, setCurrentNumber]);\n\n  return (\n    <div ref={ref} className=\"popup\" style={style}>\n      <Button className=\"m-2\" onClick={onToggle}>\n        {validIndex ? 'Ignore' : 'Keep'}\n        {' '}\n        Point\n      </Button>\n      <Button className=\"m-2\" onClick={onReposition}>Reposition</Button>\n      <InputGroup className=\"m-2\">\n        <FormControl\n          placeholder=\"New number\"\n          aria-label=\"New number\"\n          type=\"number\"\n          value={currentNumber}\n          onChange={(e) => setCurrentNumber(e.target.value)}\n          style={{ width: 'auto', maxWidth: '150px' }}\n        />\n        <Button onClick={() => onRenumber(currentIndex, parseInt(currentNumber, 10))}>\n          Renumber\n        </Button>\n      </InputGroup>\n    </div>\n  );\n});\n\nfunction LabelCanvas({\n  currentImageIndex,\n  image,\n  validImage,\n  polygons,\n  hoveredPolygon,\n  onHoverPolygon,\n  clickedPolygons,\n  onClickPolygon,\n  showPolygons,\n  points,\n  validPoints,\n  onSelectPoint,\n  onDeletePoint,\n  onIgnorePoint,\n  keyHeld,\n  hoverIndex,\n  setHoverIndex,\n  labelPointsMode,\n  lineDrawingMode,\n  linePoints,\n  setLinePoints,\n  lines,\n  onAddLine,\n  onDeleteLine,\n  leftOrRight,\n  myLeftOrRight,\n  setLeftOrRight,\n}) {\n  const [originalImageSize, setOriginalImageSize] = useState({ width: 0, height: 0 });\n  const [currentToOriginalRatio, setCurrentToOriginalRatio] = useState(1);\n  const imageRef = useRef(null);\n  const popupRef = useRef(null); // Ref for the popup\n\n  const [showPopup, setShowPopup] = useState(false);\n  const [popupPosition, setPopupPosition] = useState({ x: 0, y: 0 });\n  const [popupIndex, setPopupIndex] = useState(0);\n  const [currentNumber, setCurrentNumber] = useState('');\n  const [mousePosition, setMousePosition] = useState({ x: null, y: null });\n  const [hoveredLineIndex, setHoveredLineIndex] = useState(null);\n  const [replaceIndex, setReplaceIndex] = useState(false); // Track whether to replace the current point or not\n\n  useEffect(() => {\n    const onClickOutside = (event) => {\n      if (popupRef.current && !popupRef.current.contains(event.target)) {\n        setShowPopup(false); // Close the popup if the click is outside\n      }\n    };\n\n    // Add click listener when the component mounts\n    document.addEventListener('mousedown', onClickOutside);\n\n    // Cleanup the listener when the component unmounts\n    return () => {\n      document.removeEventListener('mousedown', onClickOutside);\n    };\n  }, []); // Empty dependency array ensures this runs once on mount\n\n  const onMouseMove = (e) => {\n    const rect = imageRef.current.getBoundingClientRect();\n    const x = (e.clientX - rect.left) / currentToOriginalRatio;\n    const y = (e.clientY - rect.top) / currentToOriginalRatio;\n    setMousePosition({ x, y });\n    setLeftOrRight(myLeftOrRight);\n  };\n\n  const onPointClick = (index, e) => {\n    const rect = imageRef.current.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    setPopupPosition({ x, y });\n    setShowPopup(true);\n    setPopupIndex(index);\n    setCurrentNumber(index + 1);\n  };\n\n  const popupStyle = {\n    position: 'absolute',\n    left: `${popupPosition.x}px`,\n    top: `${popupPosition.y}px`,\n  };\n\n  useEffect(() => {\n    const img = new Image();\n    img.onload = () => {\n      setOriginalImageSize({ width: img.width, height: img.height });\n    };\n    img.src = image;\n  }, [image]);\n\n  useEffect(() => {\n    const onResize = () => {\n      if (originalImageSize.width > 0 && originalImageSize.height > 0) {\n        const currentImage = imageRef.current;\n        const currentImageWidth = currentImage.width;\n        const widthRatio = currentImageWidth / originalImageSize.width;\n        setCurrentToOriginalRatio(widthRatio);\n      }\n    };\n\n    // Call onResize initially on mount\n    onResize();\n\n    window.addEventListener('resize', onResize);\n\n    return () => {\n      // Cleanup the event listener on component unmount\n      window.removeEventListener('resize', onResize);\n    };\n  }, [originalImageSize]);\n\n  const addLinePoint = (x, y) => {\n    const newLinePoints = [...linePoints];\n    newLinePoints.push({ x, y });\n    setLinePoints(newLinePoints);\n    if (newLinePoints.length === 2) {\n      // If two points are selected, add the line to the lines state and clear line points\n      onAddLine(currentImageIndex, { startPoint: newLinePoints[0], endPoint: newLinePoints[1] });\n      setLinePoints([]);\n    }\n  };\n\n  const onClick = (e) => {\n    const rect = e.target.getBoundingClientRect();\n    const x = (e.clientX - rect.left) / currentToOriginalRatio;\n    const y = (e.clientY - rect.top) / currentToOriginalRatio;\n    if (lineDrawingMode) {\n      addLinePoint(x, y);\n      return;\n    }\n    if (labelPointsMode) {\n      if (replaceIndex === 0 || replaceIndex) {\n        points[replaceIndex].x = x;\n        points[replaceIndex].y = y;\n        if (keyHeld === 'n') {\n          validPoints[replaceIndex] = false;\n        } else {\n          validPoints[replaceIndex] = true;\n        }\n        setReplaceIndex(false);\n        return;\n      }\n      if (keyHeld === 'n') {\n        onIgnorePoint(currentImageIndex, false);\n      } else {\n        onIgnorePoint(currentImageIndex, true);\n      }\n      onSelectPoint(currentImageIndex, { x, y });\n    }\n  };\n\n  const onClickOnPoint = (index) => {\n    const point = points[index];\n    const newLinePoints = [...linePoints];\n    newLinePoints.push(point);\n    setLinePoints(newLinePoints);\n    if (newLinePoints.length === 2) {\n      onAddLine(currentImageIndex, { startPoint: newLinePoints[0], endPoint: newLinePoints[1] });\n      setLinePoints([]);\n    }\n  };\n\n  const onLineRightClick = (e, index) => {\n    e.preventDefault(); // Prevent the default context menu\n    onDeleteLine(currentImageIndex, index);\n  };\n\n  const onLineClick = (e, index) => {\n    // If within 5 pixels from an endpoint, snap to that endpoint\n    const { x } = mousePosition;\n    const { y } = mousePosition;\n    const line = lines[index];\n    const startDistance = Math.sqrt((line.startPoint.x - x) ** 2 + (line.startPoint.y - y) ** 2);\n    const endDistance = Math.sqrt((line.endPoint.x - x) ** 2 + (line.endPoint.y - y) ** 2);\n    if (startDistance < 5) {\n      addLinePoint(line.startPoint.x, line.startPoint.y);\n      // eslint-disable-next-line no-console\n      console.log('Start point clicked');\n    }\n    if (endDistance < 5) {\n      addLinePoint(line.endPoint.x, line.endPoint.y);\n      // eslint-disable-next-line no-console\n      console.log('End point clicked');\n    }\n  };\n\n  const onRightClick = (e) => {\n    e.preventDefault();\n    const rect = e.target.getBoundingClientRect();\n    const x = e.clientX - rect.left;\n    const y = e.clientY - rect.top;\n    if (lineDrawingMode) {\n      if (linePoints.length === 1) {\n        setLinePoints([]);\n      } else if (lines.length > 0) {\n        onDeleteLine(currentImageIndex, lines.length - 1);\n      }\n      return;\n    }\n    onDeletePoint(currentImageIndex, { x, y });\n  };\n\n  const onRightClickOnPoint = (e) => {\n    e.preventDefault();\n    onDeletePoint(currentImageIndex, replaceIndex);\n  };\n\n  // iterate over all the polygons and find the max number of subpolygons\n  let max_num_subpolys = 0;\n  for (let i = 0; i < polygons.length; i += 1) {\n    if (polygons[i].length > max_num_subpolys) {\n      max_num_subpolys = polygons[i].length;\n    }\n  }\n\n  return (\n    <div\n      onMouseMove={onMouseMove}\n      style={{ position: 'relative' }}\n    >\n      <img\n        ref={imageRef}\n        src={image}\n        alt=\"Uploaded\"\n        onContextMenu={onRightClick}\n        onClick={onClick}\n        style={{\n          maxWidth: '100%',\n          opacity: validImage ? 1 : 0.3,\n          filter: validImage ? 'none' : 'grayscale(100%)',\n        }}\n        className={`${myLeftOrRight === leftOrRight ? `hovered-image-${leftOrRight}` : ''}`}\n      />\n      {showPopup && (\n        <Popup\n          ref={popupRef}\n          style={popupStyle}\n          validIndex={validPoints[popupIndex]}\n          currentIndex={popupIndex}\n          currentNumber={currentNumber}\n          setCurrentNumber={setCurrentNumber}\n          onToggle={() => {\n            validPoints[popupIndex] = !validPoints[popupIndex];\n            setShowPopup(false);\n          }}\n          onReposition={() => {\n            setReplaceIndex(popupIndex);\n            setShowPopup(false);\n          }}\n          onRenumber={(index, newNumber) => {\n            // eslint-disable-next-line no-console\n            console.log('Renumbering point', index + 1, 'to', newNumber);\n            const old_index = index;\n            const new_index = newNumber - 1;\n            if (new_index < 0 || new_index >= points.length) {\n              // eslint-disable-next-line no-console\n              console.log('Invalid index');\n              return;\n            }\n            let temp = points[old_index];\n            points[old_index] = points[new_index];\n            points[new_index] = temp;\n            temp = validPoints[old_index];\n            validPoints[old_index] = validPoints[new_index];\n            validPoints[new_index] = temp;\n            setShowPopup(false);\n          }}\n        />\n      )}\n      {showPolygons && (\n        <svg\n          width=\"100%\"\n          height=\"100%\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          style={{\n            position: 'absolute', top: 0, left: 0, pointerEvents: 'all',\n          }}\n        >\n          {polygons.map((polygon, polyIndex) => (\n            polygon.map((subpolygon, subpolyIndex) => {\n              let opacity = 0.0;\n              let hovered = false;\n              if (hoveredPolygon[polyIndex][subpolyIndex] === true) {\n                opacity = 0.5;\n                hovered = true;\n              }\n              if (clickedPolygons[polyIndex][subpolyIndex] === true) {\n                opacity = 1.0;\n              }\n              return (\n                <polygon\n                  key={polyIndex * max_num_subpolys + subpolyIndex}\n                  // eslint-disable-next-line max-len\n                  points={subpolygon.map((point) => `${point[0] * currentToOriginalRatio},${point[1] * currentToOriginalRatio}`).join(' ')}\n                  fill={`rgba(255, 255, 255, ${opacity})`}\n                  stroke=\"blue\"\n                  strokeWidth={hovered ? 4 : 0}\n                  pointerEvents=\"all\"\n                  onMouseEnter={() => onHoverPolygon(currentImageIndex, polyIndex, subpolyIndex)}\n                  onMouseLeave={() => onHoverPolygon(currentImageIndex, polyIndex, subpolyIndex)}\n                  onClick={() => onClickPolygon(currentImageIndex, polyIndex, subpolyIndex)}\n                />\n              );\n            })\n          ))}\n        </svg>\n      )}\n      <svg\n        width=\"100%\"\n        height=\"100%\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        style={{\n          position: 'absolute', top: 0, left: 0, pointerEvents: 'none',\n        }}\n      >\n        {lineDrawingMode && linePoints.length === 1 && (\n          <circle\n            cx={linePoints[0].x * currentToOriginalRatio}\n            cy={linePoints[0].y * currentToOriginalRatio}\n            r={5}\n            fill=\"green\"\n          />\n        )}\n      </svg>\n      <svg\n        width=\"100%\"\n        height=\"100%\"\n        style={{\n          position: 'absolute', top: 0, left: 0, pointerEvents: 'none',\n        }}\n        xmlns=\"http://www.w3.org/2000/svg\"\n      >\n        {lineDrawingMode && linePoints.length === 1 && mousePosition.x !== null && (\n        <line\n          x1={linePoints[0].x * currentToOriginalRatio}\n          y1={linePoints[0].y * currentToOriginalRatio}\n          x2={mousePosition.x * currentToOriginalRatio}\n          y2={mousePosition.y * currentToOriginalRatio}\n          stroke=\"red\"\n          strokeWidth={2}\n        />\n        )}\n      </svg>\n      <svg\n        width=\"100%\"\n        height=\"100%\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        style={{\n          position: 'absolute', top: 0, left: 0, pointerEvents: 'none',\n        }}\n      >\n        {lineDrawingMode && lines.map((line, index) => (\n          <line\n            key={index}\n            x1={line.startPoint.x * currentToOriginalRatio}\n            y1={line.startPoint.y * currentToOriginalRatio}\n            x2={line.endPoint.x * currentToOriginalRatio}\n            y2={line.endPoint.y * currentToOriginalRatio}\n            stroke={index === hoveredLineIndex ? 'blue' : 'red'}\n            strokeWidth={index === hoveredLineIndex ? 4 : 4} // Slightly thicker line on hover\n            style={{ cursor: 'pointer', pointerEvents: 'visibleStroke' }} // Ensure pointer events are detected\n            onMouseEnter={() => setHoveredLineIndex(index)}\n            onMouseLeave={() => setHoveredLineIndex(null)}\n            onContextMenu={(e) => onLineRightClick(e, index)}\n            onClick={(e) => onLineClick(e, index)}\n          />\n        ))}\n      </svg>\n      <svg\n        width=\"100%\"\n        height=\"100%\"\n        xmlns=\"http://www.w3.org/2000/svg\"\n        style={{\n          position: 'absolute', top: 0, left: 0, pointerEvents: 'none',\n        }}\n      >\n        {labelPointsMode && points.map((point, index) => (\n          validPoints[index] && index !== replaceIndex && ( // Check if index is not equal to replacingIndex\n            <g key={index} style={{ pointerEvents: 'all' }}>\n              <text\n                x={point.x * currentToOriginalRatio}\n                y={point.y * currentToOriginalRatio - 10} // Adjust the vertical position as needed\n                textAnchor=\"middle\"\n                fill=\"black\"\n                pointerEvents=\"none\"\n              >\n                {index + 1}\n              </text>\n              <circle\n                cx={point.x * currentToOriginalRatio}\n                cy={point.y * currentToOriginalRatio}\n                r={5} // Adjust the radius as needed\n                fill={validPoints[index] ? '#0FFF50' : 'white'}\n                stroke=\"black\"\n                strokeWidth={hoverIndex === index ? 4 : 2}\n                onMouseEnter={() => !lineDrawingMode && setHoverIndex(index)}\n                onMouseLeave={() => !lineDrawingMode && setHoverIndex(-1)}\n                onClick={(event) => {\n                  if (lineDrawingMode) {\n                    event.preventDefault();\n                    onClickOnPoint(index);\n                    return;\n                  }\n                  onPointClick(index, event);\n                }}\n                onContextMenu={(event) => {\n                  if (lineDrawingMode) {\n                    event.preventDefault();\n                    return;\n                  }\n                  onRightClickOnPoint(event);\n                }}\n              />\n            </g>\n          )\n        ))}\n      </svg>\n      <div>\n        {points && points.length > 0 && (<div>Included Points:</div>)}\n        <div className=\"points-container\">\n          {points && points.map(\n            (point, index) => validPoints[index] && (\n              <div\n                key={index}\n                className=\"point-box\"\n              // eslint-disable-next-line no-console\n              // onClick={() => console.log('Point', index + 1, 'clicked')}\n                onClick={(event) => {\n                  if (lineDrawingMode) {\n                    event.preventDefault();\n                    onClickOnPoint(index);\n                    return;\n                  }\n                  onPointClick(index, event);\n                }}\n                onContextMenu={(event) => {\n                  if (lineDrawingMode) {\n                    event.preventDefault();\n                    return;\n                  }\n                  onRightClickOnPoint(event);\n                }}\n                onMouseEnter={() => setHoverIndex(index)}\n                onMouseLeave={() => setHoverIndex(-1)}\n              >\n                {index + 1}\n              </div>\n            ),\n          )}\n        </div>\n        {points && points.length > 0 && (<div>Excluded Points:</div>)}\n        <div className=\"points-container\">\n          {points && points.map(\n            (point, index) => !validPoints[index] && (\n              <div\n                key={index}\n                className=\"point-box\"\n              // eslint-disable-next-line no-console\n              // onClick={() => console.log('Point', index + 1, 'clicked')}\n                onClick={(event) => {\n                  if (lineDrawingMode) {\n                    event.preventDefault();\n                    onClickOnPoint(index);\n                    return;\n                  }\n                  onPointClick(index, event);\n                }}\n                onContextMenu={(event) => {\n                  if (lineDrawingMode) {\n                    event.preventDefault();\n                    return;\n                  }\n                  onRightClickOnPoint(event);\n                }}\n                onMouseEnter={() => setHoverIndex(index)}\n                onMouseLeave={() => setHoverIndex(-1)}\n              >\n                {index + 1}\n              </div>\n            ),\n          )}\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default LabelCanvas;\n","import React, { useState } from 'react';\nimport Button from 'react-bootstrap/Button';\n\nfunction PointUploader({ onUpload }) {\n  const [isDragOver, setIsDragOver] = useState(false);\n\n  const uploadFile = (file) => {\n    const reader = new FileReader();\n    reader.readAsText(file, 'UTF-8');\n    reader.onload = (readerEvent) => {\n      const content = readerEvent.target.result;\n      onUpload(content);\n    };\n  };\n\n  const handleDragOver = (e) => {\n    e.preventDefault();\n    setIsDragOver(true);\n  };\n\n  const handleDrop = (e) => {\n    e.preventDefault();\n    setIsDragOver(false);\n    if (e.dataTransfer.files && e.dataTransfer.files.length > 0) {\n      uploadFile(e.dataTransfer.files[0]); // Handle the file from the drop\n      e.dataTransfer.clearData(); // Clear the drag data cache (for all formats/types)\n    }\n  };\n\n  const handleDragEnter = (e) => {\n    e.preventDefault();\n    setIsDragOver(true);\n  };\n\n  const handleDragLeave = (e) => {\n    e.preventDefault();\n    setIsDragOver(false);\n  };\n\n  const dragStyle = {\n    backgroundColor: isDragOver ? '#f8f9fa' : '', // Light grey background when dragging over\n    borderColor: isDragOver ? '#007bff' : '', // Blue border color when dragging over\n    color: isDragOver ? '#007bff' : '', // Blue text color when dragging over\n  };\n\n  return (\n    <Button\n      className=\"m-2\"\n      onClick={() => {\n        const input = document.createElement('input');\n        input.type = 'file';\n        input.accept = '.json';\n        input.onchange = (e) => {\n          if (e.target.files && e.target.files.length > 0) {\n            uploadFile(e.target.files[0]);\n          }\n        };\n        input.click();\n      }}\n      onDragOver={handleDragOver}\n      onDragEnter={handleDragEnter}\n      onDragLeave={handleDragLeave}\n      onDrop={handleDrop}\n      style={dragStyle} // Apply inline styles based on drag state\n    >\n      Import\n    </Button>\n  );\n}\n\nexport default PointUploader;\n","import React, { useState, useEffect } from 'react';\nimport { Container, Row, Col } from 'react-bootstrap';\nimport Button from 'react-bootstrap/Button';\nimport JSZip from 'jszip';\nimport ReactGA from 'react-ga';\nimport Instructions from './Instructions';\nimport LabelCanvas from './LabelCanvas';\nimport PointUploader from './PointUploader';\n\nimport './App.css';\n\nfunction Gallery({\n  images, leftImageIndex, setLeftImageIndex, rightImageIndex, setRightImageIndex, validImages, leftOrRight,\n}) {\n  return (\n    <Row className=\"gallery-row\">\n      {images.map((image, index) => (\n        <Col key={index} className=\"gallery-item mb-3\">\n          {/* eslint-disable-next-line jsx-a11y/img-redundant-alt */}\n          <img\n            src={image}\n            alt={`Image ${index + 1}`}\n            className={`gallery-item ${\n              index === leftImageIndex ? 'gallery-item-left-selected' : ''} ${\n              index === rightImageIndex ? 'gallery-item-right-selected' : ''}`}\n            onClick={() => {\n              if (leftOrRight === 'left') {\n                setLeftImageIndex(index);\n              } else {\n                setRightImageIndex(index);\n              }\n            }}\n            style={{\n              opacity: validImages[index] ? 1 : 0.3,\n              filter: validImages[index] ? 'none' : 'grayscale(100%)',\n            }}\n          />\n        </Col>\n      ))}\n    </Row>\n  );\n}\n\nfunction App() {\n  useEffect(() => {\n    ReactGA.send({ hitType: 'pageview', page: window.location.pathname });\n  }, []);\n\n  // eslint-disable-next-line no-unused-vars\n  const [metadata, setMetadata] = useState(null);\n  const [images, setImages] = useState([]);\n  const [validImages, setValidImages] = useState([]); // Track whether the images are valid or not\n  const [depths, setDepths] = useState([]);\n  const [polygons, setPolygons] = useState([]);\n  const [hoveredPolygons, setHoveredPolygon] = useState();\n  const [clickedPolygons, setClickedPolygons] = useState([]);\n  const [labelPointsMode, setLabelPointsMode] = useState(true);\n  const [showPolygons, setShowPolygons] = useState(false); // Track whether we are labeling polygons or not\n  const [lineDrawingMode, setLineDrawingMode] = useState(false);\n  const [linePoints, setLinePoints] = useState([]);\n  const [lines, setLines] = useState([]);\n  const [points, setPoints] = useState([]);\n  const [validPoints, setValidPoints] = useState([]); // Track whether the points are valid or not\n  const [keyHeld, setKeyHeld] = useState('');\n  const [leftOrRight, setLeftOrRight] = useState('right');\n  const [leftImageIndex, setLeftImageIndex] = useState(0); // Track the left image index\n  const [rightImageIndex, setRightImageIndex] = useState(0); // Track the right image index\n  const [hoverIndex, setHoverIndex] = useState(-1); // Track which point is being hovered over\n\n  const nextLeftImage = () => {\n    setLeftImageIndex((prevIndex) => (prevIndex + 1 > images.length - 1 ? 0 : prevIndex + 1));\n  };\n\n  const prevLeftImage = () => {\n    setLeftImageIndex((prevIndex) => (prevIndex - 1 < 0 ? images.length - 1 : prevIndex - 1));\n  };\n\n  const nextRightImage = () => {\n    setRightImageIndex((prevIndex) => (prevIndex + 1 > images.length - 1 ? 0 : prevIndex + 1));\n  };\n\n  const prevRightImage = () => {\n    setRightImageIndex((prevIndex) => (prevIndex - 1 < 0 ? images.length - 1 : prevIndex - 1));\n  };\n\n  const nextImage = () => {\n    if (leftOrRight === 'left') {\n      nextLeftImage();\n    } else {\n      nextRightImage();\n    }\n  };\n\n  const prevImage = () => {\n    if (leftOrRight === 'left') {\n      prevLeftImage();\n    } else {\n      prevRightImage();\n    }\n  };\n\n  const onKeyDown = (e) => {\n    if (e.key === 'ArrowLeft') {\n      prevImage();\n    }\n    if (e.key === 'ArrowRight') {\n      nextImage();\n    }\n    if (e.key === 'n') {\n      setKeyHeld('n');\n    }\n    if (e.key === 'r') {\n      setKeyHeld('r');\n    }\n    if (e.key === 'd') {\n      setKeyHeld('d');\n    }\n  };\n\n  const onKeyUp = () => {\n    setKeyHeld('');\n  };\n\n  // Function to parse query parameters from the URL\n  const parseQueryString = () => {\n    const queryString = window.location.search;\n    const urlParams = new URLSearchParams(queryString);\n    return {\n      path: urlParams.get('path') || '',\n    };\n  };\n\n  // Get the parsed query parameters\n  const { path } = parseQueryString();\n\n  // function for processing metadata\n  const handleMetadata = (data) => {\n    setMetadata(data);\n    const polygonsArray = data.frames.map((frame) => (frame.masks.map((mask) => (mask.polygons))));\n    setPolygons(polygonsArray);\n    setHoveredPolygon(data.frames.map((frame) => (frame.masks.map((mask) => (mask.polygons.map(() => false))))));\n    setClickedPolygons(data.frames.map((frame) => (frame.masks.map((mask) => (mask.polygons.map(() => false))))));\n    const pointsArray = data.frames.map(() => ([]));\n    setPoints(pointsArray);\n    let linesArray = [];\n    if (data.frames[0].lines) {\n      linesArray = data.frames.map((frame) => (frame.lines.map((line) => ({\n        startPoint: { x: line[0][1], y: line[0][0] },\n        endPoint: { x: line[1][1], y: line[1][0] },\n      }))));\n      setLines(linesArray);\n    } else {\n      setLines(data.frames.map(() => ([])));\n    }\n    setValidPoints(data.frames.map(() => ([])));\n  };\n\n  const onPointsUpload = (fileContent) => {\n    const data = JSON.parse(fileContent);\n    if (data.points) {\n      const updatedPoints = data.points.map(() => ([]));\n      for (let i = 0; i < data.points.length; i += 1) {\n        for (let j = 0; j < data.points[i].length; j += 1) {\n          const point = data.points[i][j];\n          const { x } = point;\n          const { y } = point;\n          updatedPoints[i].push({ x, y });\n        }\n      }\n      setPoints(updatedPoints);\n    }\n    if (data.polygons) {\n      setClickedPolygons(data.polygons);\n    }\n    if (data.validPoints) {\n      setValidPoints(data.validPoints);\n    }\n    if (data.validImages) {\n      setValidImages(data.validImages);\n    }\n    if (data.lines) {\n      setLines(data.lines);\n    }\n  };\n\n  const onLoadCurrent = () => {\n    const fetchCurrent = async () => {\n      try {\n        // Assuming data.frames and path are available\n        const cleanedPath = path.endsWith('/') ? path.slice(0, -1) : path;\n        // Use the current timestamp to avoid cache\n        const timestamp = new Date().getTime();\n        const pointsURL = `${cleanedPath}/points.json?_=${timestamp}`;\n        const response = await fetch(pointsURL, {\n          cache: 'no-cache', // This tells the request to try to fetch a fresh copy\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch points data');\n        }\n        const data = await response.json();\n        const jsonString = JSON.stringify(data);\n        // eslint-disable-next-line no-console\n        console.log(data);\n        onPointsUpload(jsonString);\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('Error fetching data:', error);\n      }\n    };\n    fetchCurrent();\n  };\n\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // Assuming data.frames and path are available\n        const cleanedPath = path.endsWith('/') ? path.slice(0, -1) : path;\n        const metadataURL = `${cleanedPath}/metadata.json`;\n        const response = await fetch(metadataURL);\n        if (!response.ok) {\n          throw new Error('Failed to fetch metadata data');\n        }\n        const data = await response.json();\n        handleMetadata(data);\n        const imageURLs = data.frames.map((frame) => (`${path}/${frame.file_path}`));\n        setImages(imageURLs);\n        setValidImages(data.frames.map(() => (true)));\n        const depthURLs = data.frames.map((frame) => (`${path}/${frame.depth_image_file_path}`));\n        setDepths(depthURLs);\n\n        // Automatically load current points after initial data load\n        if (path) {\n          onLoadCurrent();\n        }\n      } catch (error) {\n        // eslint-disable-next-line no-console\n        console.error('Error fetching data:', error);\n      }\n    };\n\n    fetchData();\n  }, []); // Empty dependency array ensures this effect runs once on mount\n\n  useEffect(() => {\n    window.addEventListener('keydown', onKeyDown);\n    window.addEventListener('keyup', onKeyUp);\n    return () => {\n      window.removeEventListener('keydown', onKeyDown);\n      window.removeEventListener('keyup', onKeyUp);\n    };\n  }, [onKeyDown, onKeyUp]);\n\n  const onClearCurrent = () => {\n    setPoints(images.map(() => ([])));\n    setValidPoints(images.map(() => ([])));\n    setClickedPolygons(images.map(() => ([])));\n    setLines(images.map(() => ([])));\n    setValidImages(images.map(() => true));\n    setHoveredPolygon(images.map(() => ([])));\n    setLinePoints([]);\n  };\n\n  const onSelectPoint = (currentImageIndex, point) => {\n    const updatedPoints = [...points];\n    updatedPoints[currentImageIndex].push(point);\n    setPoints(updatedPoints);\n  };\n\n  const onDeletePoint = (currentImageIndex) => {\n    const updatedPoints = [...points];\n    // delete latest point\n    updatedPoints[currentImageIndex].pop();\n    setPoints(updatedPoints);\n    // delete latest valid point\n    const updatedValidPoints = [...validPoints];\n    updatedValidPoints[currentImageIndex].pop();\n    setValidPoints(updatedValidPoints);\n  };\n\n  const onIgnorePoint = (currentImageIndex, value) => {\n    const updatedValidPoints = [...validPoints];\n    updatedValidPoints[currentImageIndex].push(value);\n    setValidPoints(updatedValidPoints);\n  };\n\n  const onClickPolygon = (currentImageIndex, polyIndex, subpolyIndex) => {\n    const updatedClickedPolygons = [...clickedPolygons];\n    // eslint-disable-next-line max-len\n    updatedClickedPolygons[currentImageIndex][polyIndex][subpolyIndex] = !updatedClickedPolygons[currentImageIndex][polyIndex][subpolyIndex];\n    setClickedPolygons(updatedClickedPolygons);\n  };\n\n  const onHoverPolygon = (currentImageIndex, polyIndex, subpolyIndex) => {\n    const updatedHoveredPolygons = [...hoveredPolygons];\n    // eslint-disable-next-line max-len\n    updatedHoveredPolygons[currentImageIndex][polyIndex][subpolyIndex] = !updatedHoveredPolygons[currentImageIndex][polyIndex][subpolyIndex];\n    setHoveredPolygon(updatedHoveredPolygons);\n  };\n\n  const onAddLine = (currentImageIndex, line) => {\n    const updatedLines = [...lines];\n    updatedLines[currentImageIndex].push(line);\n    setLines(updatedLines);\n  };\n\n  const onDeleteLine = (currentImageIndex, lineIndex) => {\n    const updatedLines = [...lines];\n    updatedLines[currentImageIndex].splice(lineIndex, 1);\n    setLines(updatedLines);\n  };\n\n  const toggleValidImage = (index) => {\n    const updatedValidImages = [...validImages];\n    updatedValidImages[index] = !updatedValidImages[index];\n    setValidImages(updatedValidImages);\n  };\n\n  const onExport = () => {\n    const data = {\n      points,\n      validPoints,\n      polygons: clickedPolygons,\n      validImages,\n      lines,\n    };\n    const json = JSON.stringify(data, null, 2);\n\n    // You can save the JSON or perform other actions here\n    const dataStr = `data:text/json;charset=utf-8,${encodeURIComponent(json)}`;\n    const downloadAnchorNode = document.createElement('a');\n    downloadAnchorNode.setAttribute('href', dataStr);\n    downloadAnchorNode.setAttribute('download', 'points.json');\n    document.body.appendChild(downloadAnchorNode); // required for firefox\n    downloadAnchorNode.click();\n    downloadAnchorNode.remove();\n  };\n\n  const onAddIgnorePoints = () => {\n    const current_points = points;\n    const current_valid_points = validPoints;\n\n    // find max number of points for any image\n    let max_num_points = 0;\n    for (let i = 0; i < current_points.length; i += 1) {\n      if (current_points[i].length > max_num_points) {\n        max_num_points = current_points[i].length;\n      }\n    }\n\n    // add ignore points for all images\n    for (let i = 0; i < current_points.length; i += 1) {\n      const num_points = current_points[i].length;\n      for (let j = num_points; j < max_num_points; j += 1) {\n        current_points[i].push({ x: 0, y: 0 });\n        current_valid_points[i].push(false);\n      }\n    }\n\n    setPoints(current_points);\n    setValidPoints(current_valid_points);\n  };\n\n  const [showInstructions, setShowInstructions] = useState(false);\n  const onCloseInstructions = () => setShowInstructions(false);\n  const onShowInstructions = () => setShowInstructions(true);\n\n  const onUploadImages = () => {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = 'image/*';\n    input.multiple = true;\n    input.onchange = async (e) => {\n      const files = Array.from(e.target.files);\n      const sortedFiles = files.sort((a, b) => a.name.localeCompare(b.name));\n      const tempImages = [];\n\n      for (let i = 0; i < sortedFiles.length; i += 1) {\n        const imageUrl = URL.createObjectURL(sortedFiles[i]);\n        tempImages.push(imageUrl);\n      }\n\n      setImages(tempImages);\n      setValidImages(tempImages.map(() => (true)));\n      setDepths(tempImages); // set depths to images for now\n      setPolygons(tempImages.map(() => ([])));\n      setHoveredPolygon(tempImages.map(() => ([])));\n      setClickedPolygons(tempImages.map(() => ([])));\n      setPoints(tempImages.map(() => ([])));\n      setValidPoints(tempImages.map(() => ([])));\n      setLines(tempImages.map(() => ([])));\n    };\n    input.click();\n  };\n\n  const onUploadZIP = () => {\n    const input = document.createElement('input');\n    input.type = 'file';\n    input.accept = '.zip';\n    input.onchange = async (e) => {\n      const file = e.target.files[0];\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(file);\n      reader.onload = async (readerEvent) => {\n        const buffer = readerEvent.target.result;\n        const zip = new JSZip();\n        const contents = await zip.loadAsync(buffer);\n        const tempImages = [];\n        const tempDepthImages = [];\n        const tempMetadata = {};\n\n        const tempImageFilenames = [];\n        const tempDepthImageFilenames = [];\n\n        // eslint-disable-next-line no-restricted-syntax\n        for (const [fileName, fileData] of Object.entries(contents.files)) {\n          if (!fileData.dir) {\n            if (fileName.endsWith('metadata.json')) {\n              // eslint-disable-next-line no-await-in-loop\n              const jsonContent = await fileData.async('string');\n              Object.assign(tempMetadata, JSON.parse(jsonContent));\n            } else if (fileName.match(/depth-images\\/.*\\.(png|jpg|jpeg)$/)) {\n              // Check for depth images in 'depth-images/' folder\n              tempDepthImageFilenames.push(fileName);\n            } else if (fileName.match(/images\\/.*\\.(png|jpg|jpeg)$/)) {\n              // Check for regular images in 'images/' folder\n              tempImageFilenames.push(fileName);\n            }\n          }\n        }\n\n        // Sort the images and depth images\n        tempImageFilenames.sort();\n        tempDepthImageFilenames.sort();\n        // Load the images and depth images\n        for (let i = 0; i < tempImageFilenames.length; i += 1) {\n          // eslint-disable-next-line no-await-in-loop\n          const imageUrl = await contents.file(tempImageFilenames[i]).async('blob');\n          tempImages.push(URL.createObjectURL(imageUrl));\n        }\n        for (let i = 0; i < tempDepthImageFilenames.length; i += 1) {\n          // eslint-disable-next-line no-await-in-loop\n          const depthImageUrl = await contents.file(tempDepthImageFilenames[i]).async('blob');\n          tempDepthImages.push(URL.createObjectURL(depthImageUrl));\n        }\n\n        if (Object.keys(tempMetadata).length === 0) {\n          // no metadata file found\n          // eslint-disable-next-line no-alert\n          alert('No metadata file found in the ZIP folder.');\n        } else {\n          // metadata file found\n          handleMetadata(tempMetadata);\n          setImages(tempImages);\n          setValidImages(tempImages.map(() => (true)));\n          setDepths(tempDepthImages);\n        }\n      };\n    };\n    input.click();\n  };\n\n  return (\n    <Container className=\"p-3\">\n      <h1 className=\"header header-style\">\n        <a href=\"/\" style={{ color: 'inherit', textDecoration: 'none' }}>Toon3D Labeler</a>\n      </h1>\n      <p className=\"header\">\n        This is a simple tool to manually annotate correspondences on a set of images.\n        Click to see examples from the Toon3D Dataset:\n      </p>\n      <div className=\"d-flex flex-wrap justify-content-center mb-2\">\n        {[\n          'avatar-house',\n          'bobs-burgers',\n          'bojak-room',\n          'family-guy-dining',\n          'family-guy-house',\n          'krusty-krab',\n          'magic-school-bus',\n          'mystery-machine',\n          'planet-express',\n          'simpsons-house',\n          'smith-residence',\n          'spirited-away',\n        ].map((example) => (\n          <Button\n            key={example}\n            variant=\"outline-secondary\"\n            size=\"sm\"\n            className=\"btn-xs m-1\"\n            onClick={() => {\n              window.location.href = `/?path=https://ethanweber.me/toon3d-dataset/${example}`;\n            }}\n          >\n            {example}\n          </Button>\n        ))}\n      </div>\n      <Button variant=\"outline-primary\" onClick={onUploadImages} className=\"me-2\">Upload Images</Button>\n      <Button variant=\"outline-primary\" onClick={onUploadZIP} className=\"me-2\">Upload ZIP</Button>\n      <Button variant=\"outline-primary\" onClick={onShowInstructions} className=\"me-2\">Instructions</Button>\n      <Button variant=\"outline-primary\" href=\"https://toon3d.studio\" target=\"_blank\">Project Page</Button>\n      <hr />\n      <Instructions show={showInstructions} onHide={onCloseInstructions} />\n      <Gallery\n        images={images}\n        leftImageIndex={leftImageIndex}\n        setLeftImageIndex={setLeftImageIndex}\n        rightImageIndex={rightImageIndex}\n        setRightImageIndex={setRightImageIndex}\n        validImages={validImages}\n        leftOrRight={leftOrRight}\n      />\n      <br />\n      <Row>\n        <Col md={12} className=\"d-flex justify-content-center\">\n          <Button className=\"m-2\" onClick={() => setLabelPointsMode(!labelPointsMode)}>\n            {labelPointsMode ? 'Hide' : 'Show'}\n            {' '}\n            Points\n          </Button>\n          <Button className=\"m-2\" onClick={() => setShowPolygons(!showPolygons)}>\n            {showPolygons ? 'Hide' : 'Show'}\n            {' '}\n            Polygons\n          </Button>\n          <Button className=\"m-2\" onClick={() => setLineDrawingMode(!lineDrawingMode)}>\n            {lineDrawingMode ? 'Hide' : 'Show'}\n            {' '}\n            Lines\n          </Button>\n          <Button className=\"m-2\" variant=\"info\" onClick={() => onAddIgnorePoints()}>Add Ignore Points</Button>\n        </Col>\n      </Row>\n      <Row>\n        <Col md={6}>\n          <Button className=\"m-2\" onClick={() => prevLeftImage()}>Previous</Button>\n          <Button className=\"m-2\" onClick={() => nextLeftImage()}>Next</Button>\n          <Button\n            className=\"m-2\"\n            style={{ opacity: validImages[leftImageIndex] ? 1 : 0.3 }}\n            onClick={() => toggleValidImage(leftImageIndex)}\n          >\n            {validImages[leftImageIndex] ? 'Ignore' : 'Keep'}\n            {' '}\n            Image\n          </Button>\n          {(images.length > 0 || depths.length > 0) && (\n          <LabelCanvas\n            currentImageIndex={leftImageIndex}\n            image={((keyHeld !== 'd' && images[leftImageIndex])\n          || !depths[leftImageIndex]) ? images[leftImageIndex] : depths[leftImageIndex]}\n            validImage={validImages[leftImageIndex]}\n            polygons={polygons[leftImageIndex]}\n            hoveredPolygon={hoveredPolygons[leftImageIndex]}\n            onHoverPolygon={onHoverPolygon}\n            clickedPolygons={clickedPolygons[leftImageIndex]}\n            onClickPolygon={onClickPolygon}\n            showPolygons={showPolygons}\n            points={points[leftImageIndex]}\n            validPoints={validPoints[leftImageIndex]}\n            onSelectPoint={onSelectPoint}\n            onDeletePoint={onDeletePoint}\n            onIgnorePoint={onIgnorePoint}\n            keyHeld={keyHeld}\n            hoverIndex={hoverIndex}\n            setHoverIndex={setHoverIndex}\n            labelPointsMode={labelPointsMode}\n            lineDrawingMode={lineDrawingMode}\n            linePoints={linePoints}\n            setLinePoints={setLinePoints}\n            lines={lines[leftImageIndex]}\n            onAddLine={onAddLine}\n            onDeleteLine={onDeleteLine}\n            leftOrRight={leftOrRight}\n            myLeftOrRight=\"left\"\n            setLeftOrRight={setLeftOrRight}\n          />\n          )}\n        </Col>\n        <Col md={6}>\n          <Button className=\"m-2\" onClick={() => prevRightImage()}>Previous</Button>\n          <Button className=\"m-2\" onClick={() => nextRightImage()}>Next</Button>\n          <Button\n            className=\"m-2\"\n            style={{ opacity: validImages[rightImageIndex] ? 1 : 0.3 }}\n            onClick={() => toggleValidImage(rightImageIndex)}\n          >\n            {validImages[rightImageIndex] ? 'Ignore' : 'Keep'}\n            {' '}\n            Image\n          </Button>\n          {(images.length > 0 || depths.length > 0) && (\n          <LabelCanvas\n            currentImageIndex={rightImageIndex}\n            image={((keyHeld !== 'd' && images[rightImageIndex])\n          || !depths[rightImageIndex]) ? images[rightImageIndex] : depths[rightImageIndex]}\n            validImage={validImages[rightImageIndex]}\n            polygons={polygons[rightImageIndex]}\n            hoveredPolygon={hoveredPolygons[rightImageIndex]}\n            onHoverPolygon={onHoverPolygon}\n            clickedPolygons={clickedPolygons[rightImageIndex]}\n            onClickPolygon={onClickPolygon}\n            showPolygons={showPolygons}\n            points={points[rightImageIndex]}\n            validPoints={validPoints[rightImageIndex]}\n            onSelectPoint={onSelectPoint}\n            onDeletePoint={onDeletePoint}\n            onIgnorePoint={onIgnorePoint}\n            keyHeld={keyHeld}\n            hoverIndex={hoverIndex}\n            setHoverIndex={setHoverIndex}\n            labelPointsMode={labelPointsMode}\n            lineDrawingMode={lineDrawingMode}\n            linePoints={linePoints}\n            setLinePoints={setLinePoints}\n            lines={lines[rightImageIndex]}\n            onAddLine={onAddLine}\n            onDeleteLine={onDeleteLine}\n            leftOrRight={leftOrRight}\n            myLeftOrRight=\"right\"\n            setLeftOrRight={setLeftOrRight}\n          />\n          )}\n        </Col>\n      </Row>\n      <Row>\n        <Col md={12} className=\"d-flex justify-content-center\">\n          <Button className=\"m-2\" onClick={onExport}>Export</Button>\n          <PointUploader onUpload={onPointsUpload} />\n          <Button className=\"m-2\" onClick={onLoadCurrent}>Load Current</Button>\n          <Button className=\"m-2\" onClick={onClearCurrent}>Clear Current</Button>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// eslint-disable-next-line import/order\nimport ReactGA from 'react-ga';\n\n// Initialize Google Analytics\nconst initializeAnalytics = () => {\n  const trackingId = process.env.REACT_APP_GA_TRACKING_ID;\n  if (trackingId) { // Ensure the tracking ID is present\n    ReactGA.initialize(trackingId);\n  } else {\n    // eslint-disable-next-line no-console\n    console.error('Google Analytics Tracking ID not found');\n  }\n};\n\ninitializeAnalytics();\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\n\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n);\ndocument.body.classList.add('background-color');\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}